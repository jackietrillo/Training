import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import javax.swing.SwingConstants;
import javax.swing.JLabel;
import javax.swing.JPanel;
import java.util.ArrayList;

public class DrawingPanel extends JPanel  implements MouseListener, MouseMotionListener {
   
	private static final long serialVersionUID = 1L;
	private Boolean penActivated = true; 
	private JLabel penActiveLabel;
	private JLabel instructionLabel;
	private Color penColor;
	private Boolean clear = false;
	private DrawingPath path = new DrawingPath(Color.BLACK);
    private ArrayList<DrawingPath> paths = new ArrayList<DrawingPath>();
           
    public DrawingPanel() {
        this.setBackground(Color.WHITE);
        this.setSize(300, 300);
        this.setLocation(0, 100);
        this.setLayout(new BorderLayout());
       
        this.penActiveLabel = new JLabel("Pen Active", SwingConstants.RIGHT);             
        this.add(penActiveLabel, BorderLayout.SOUTH);
        
        this.instructionLabel = new JLabel("Draw something by dragging the mouse!", SwingConstants.CENTER);
        this.add(instructionLabel, BorderLayout.NORTH);  
                                            
        this.addMouseListener(this);
        this.addMouseMotionListener(this);
    }
   
    public void setPenColor(Color color) {
	   this.penColor = color;	  
    }
        
    public void erase() {
	   this.setPenColor(Color.WHITE); 
    }
    
    public void clear() {
    	 clear = true;
    	 repaint();
    }
        
    ///// DRAWING
    /**
     * Draw the disks.
     */
    @Override
    public void paintComponent(Graphics gfx) {     
    	if (this.penActivated) {    		
	        super.paintComponent(gfx);
	      
	        Graphics2D graphic2D = (Graphics2D) gfx;	        
	        graphic2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);		     	     
	      
	        graphic2D.setStroke(new BasicStroke(10));        	        
	        for (DrawingPath path : paths ) {
	        	if (!this.clear) {
	        		graphic2D.setColor(path.getColor());
	        		graphic2D.draw(path.getPath());
	        	}
	        	else {
	        		System.out.println("here");
	        		graphic2D.setColor(Color.WHITE);
	        		graphic2D.draw(path.getPath());
	        	}
	        }
	        
	        //graphic2D.setColor(this.penColor);
	       // graphic2D.setStroke(new BasicStroke(2));
	        //graphic2D.draw(this.path.getPath());        
    	}
    }

    ///// MOUSE INTERACTION
    // Implementation of MouseListener
    @Override
    public void mouseClicked(MouseEvent e) {
    	this.penActivated = !penActivated;    	  
    	this.penActiveLabel.setText((this.penActivated ? "Pen Active" : "Pen Inactive"));    	       	
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }
    
    @Override
    public void mouseMoved(MouseEvent e) {            	
    }
    
    @Override
    public void mousePressed(MouseEvent e) {
    	if (this.penActivated) {    	
    		path = new DrawingPath(this.penColor);
    		paths.add(path);	     
	        path.getPath().moveTo(e.getX(), e.getY());
	        repaint();
    	}
    }
    
    // Implementation of MouseMotionListener
    @Override
    public void mouseDragged(MouseEvent e) {
    	if (this.penActivated) {
    		path.getPath().lineTo(e.getX(), e.getY());
    		repaint();
    	}
    }  
}