import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.GeneralPath;
import java.util.LinkedList;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;


public class DrawingPanel extends JPanel implements MouseListener, MouseMotionListener {
   
	private static final long serialVersionUID = 1L;

	private Boolean penActivated = false; 
	
	private GeneralPath p = new GeneralPath();

    LinkedList<GeneralPath> old_paths= new LinkedList<GeneralPath>();
    
    private Color penColor;
    
    public DrawingPanel() {
        setBackground(Color.BLUE);
        this.setSize(300, 300);
        this.setLocation(0, 100);
       
        JLabel activeLabel = new JLabel("Active", SwingConstants.RIGHT);
        
        this.add(activeLabel, BorderLayout.SOUTH);
        
        addMouseListener(this);
        addMouseMotionListener(this);
    }
   
   public void setColor(Color color) {
	   this.penColor = color;
	   
   }
    ///// DRAWING
    /**
     * Draw the disks.
     */
    @Override
    public void paintComponent(Graphics gfx) {
     
    //	if (this.penActivated) {
        super.paintComponent(gfx);
      
        Graphics2D g = (Graphics2D) gfx;
        
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        g.setColor(Color.BLACK);
        g.drawString("Draw something by dragging the mouse!", 10, 20);
        
        g.setColor(this.penColor);
        g.setStroke(new BasicStroke(2));        
        for (GeneralPath old_path : old_paths ) {
            g.draw(old_path);
        }
        
        g.setColor(this.penColor);
        g.setStroke(new BasicStroke(2));
        g.draw(p);        
    //	}
    }

    ///// MOUSE INTERACTION
    // Implementation of MouseListener
    @Override
    public void mouseClicked(MouseEvent e) {
    	this.penActivated = !penActivated;
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }
    
    @Override
    public void mousePressed(MouseEvent e) {
   // 	if (this.penActivated) {
    	
    	   p = new GeneralPath();
	        old_paths.add(p);	     
	        p.moveTo(e.getX(), e.getY());
	        repaint();
    //	}
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    // Implementation of MouseMotionListener
    @Override
    public void mouseDragged(MouseEvent e) {
    	//if (this.penActivated) {
    		p.lineTo(e.getX(), e.getY());
    		repaint();
    	//}
    }

    @Override
    public void mouseMoved(MouseEvent e) {        
    }
    
}