import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.*;
import java.util.ArrayList;
import javax.swing.JPanel;
import java.awt.BasicStroke;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.GeneralPath;
import java.util.LinkedList;


public class DrawingPanel extends JPanel implements MouseListener, MouseMotionListener  {
   
	private static final long serialVersionUID = 1L;
	GeneralPath p = new GeneralPath();

    LinkedList<GeneralPath> old_paths= new LinkedList<GeneralPath>();
	
	private Boolean penActivated = false; 
	private Color penColor;
	    
    public DrawingPanel() {
        setBackground(Color.WHITE); 
        this.setSize(400, 400);
        this.setLocation(0, 100);
        setColor(Color.BLACK);
    }
      
    public void setColor(Color penColor) {
    	
    	this.penColor = penColor;
    	       
    }
    
	@Override
	  public void paintComponent(Graphics gfx) {
	     
		if (this.penActivated) {
	    super.paintComponent(gfx);
	    Graphics2D g = (Graphics2D) gfx;
	    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
	            RenderingHints.VALUE_ANTIALIAS_ON);
	
	 //   g.setColor(Color.BLACK);
	  //  g.drawString("Draw something by dragging the mouse!", 10, 20);
	    
	    g.setColor(this.penColor);
	    g.setStroke(new BasicStroke(2));        
	    for (GeneralPath old_path : old_paths ) {
	        g.draw(old_path);
	    }
	    
	    g.setColor(Color.GREEN);
	    g.setStroke(new BasicStroke(2));
	    g.draw(p);        
		}
	}

	@Override
	  public void mouseDragged(MouseEvent e) {
    	if (this.penActivated) {
    		p.lineTo(e.getX(), e.getY());
    		repaint();
    	}
    }
	@Override
	public void mouseMoved(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseClicked(MouseEvent me) {
    	this.penActivated = !penActivated;
    }

	@Override
	 public void mousePressed(MouseEvent e) {
    	if (this.penActivated) {
	        old_paths.add(p);
	        p = new GeneralPath();
	        p.moveTo(e.getX(), e.getY());
	        repaint();
    	}
    }

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}
         
}